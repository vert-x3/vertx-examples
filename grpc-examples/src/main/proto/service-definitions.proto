syntax = "proto3";

import "empty.proto";
import "messages.proto";

package io.vertx.example.grpc;

service EmptyPingPongService {
  // One empty request followed by one empty response.
  rpc EmptyCall(Empty) returns (Empty);
}

service PingPongService {
  // One request followed by one response.
  rpc UnaryCall(SimpleRequest) returns (SimpleResponse);
}

service ConsumerService {
  // One request followed by a sequence of responses (streamed download).
  // The server returns the payload with client desired type and sizes.
  rpc StreamingOutputCall(StreamingOutputCallRequest) returns (stream StreamingOutputCallResponse);
}

service ProducerService {
  // A sequence of requests followed by one response (streamed upload).
  // The server returns the aggregated size of client payload as the result.
  rpc StreamingInputCall(stream StreamingInputCallRequest) returns (StreamingInputCallResponse);
}

service ConversationalService {
  // A sequence of requests with each request served by the server immediately.
  // As one request could lead to multiple responses, this interface
  // demonstrates the idea of full duplexing.
  rpc FullDuplexCall(stream StreamingOutputCallRequest) returns (stream StreamingOutputCallResponse);
}
